import protobuf from 'protobufjs';
import { Buffer } from 'buffer';

async function decodeVehicleData(base64String: string) {
    // Decode the Base64 string to a buffer
    const buffer = Buffer.from(base64String, 'base64');
    // Create a new root instance
    const root = new protobuf.Root();

    // Load the .proto file into the root
    await root.load('./protos/vehicle_data.proto');

    const messages = ['LocationValue', 'Doors', 'TireLocation', 'Time', 'Value', 'Datum', 'Payload'];

    for (const message of messages) {
        // Lookup the message type
        const VehicleData = root.lookupType('telemetry.vehicle_data.' + message);
        try {
            // Decode the buffer to a message
            const message = VehicleData.decode(buffer);
            // Convert the message to a plain object
            const object = VehicleData.toObject(message, {
                longs: String,
                enums: String,
                bytes: String,
                defaults: true, // Include default values
                arrays: true,   // Populate empty arrays
                objects: true,  // Populate empty objects
            });
            console.log(object);
        } catch (error) {
            console.error('Failed to decode vehicle data:', error);
        }
    }
}

// Example usage:
const base64String = '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';
decodeVehicleData(base64String);